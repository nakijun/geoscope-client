//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace SpaceViewer.TBase2DVisualizationSOAPFunctionality {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ITBase2DVisualizationSOAPFunctionalitybinding", Namespace="http://tempuri.org/")]
    public class ITBase2DVisualizationSOAPFunctionalityService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public ITBase2DVisualizationSOAPFunctionalityService(string pServerURL) {
            this.Url = pServerURL + "/SpaceSOAPServer.dll/soap/itbase2dvisualizationsoapfunctionality";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#GetLayInfo", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("Lay")]
        public int GetLayInfo(string pUserName, string pUserPassword, int pidTObj, long pidObj, out int SubLay) {
            object[] results = this.Invoke("GetLayInfo", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            SubLay = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLayInfo(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLayInfo", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetLayInfo(System.IAsyncResult asyncResult, out int SubLay) {
            object[] results = this.EndInvoke(asyncResult);
            SubLay = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#GetProps", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("oflagLoop")]
        public bool GetProps(string pUserName, string pUserPassword, int pidTObj, long pidObj, out int oColor, out System.Double oWidth, out bool oflagFill, out int oColorFill) {
            object[] results = this.Invoke("GetProps", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            oColor = ((int)(results[1]));
            oWidth = ((System.Double)(results[2]));
            oflagFill = ((bool)(results[3]));
            oColorFill = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetProps(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetProps", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndGetProps(System.IAsyncResult asyncResult, out int oColor, out System.Double oWidth, out bool oflagFill, out int oColorFill) {
            object[] results = this.EndInvoke(asyncResult);
            oColor = ((int)(results[1]));
            oWidth = ((System.Double)(results[2]));
            oflagFill = ((bool)(results[3]));
            oColorFill = ((int)(results[4]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#SetProps", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void SetProps(string pUserName, string pUserPassword, int pidTObj, long pidObj, bool pflagLoop, int pColor, System.Double pWidth, bool pflagFill, int pColorFill) {
            this.Invoke("SetProps", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        pflagLoop,
                        pColor,
                        pWidth,
                        pflagFill,
                        pColorFill});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetProps(string pUserName, string pUserPassword, int pidTObj, long pidObj, bool pflagLoop, int pColor, System.Double pWidth, bool pflagFill, int pColorFill, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetProps", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        pflagLoop,
                        pColor,
                        pWidth,
                        pflagFill,
                        pColorFill}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetProps(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#CreateNode", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void CreateNode(string pUserName, string pUserPassword, int pidTObj, long pidObj, int CreateNodeIndex, System.Double X, System.Double Y) {
            this.Invoke("CreateNode", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        CreateNodeIndex,
                        X,
                        Y});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateNode(string pUserName, string pUserPassword, int pidTObj, long pidObj, int CreateNodeIndex, System.Double X, System.Double Y, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateNode", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        CreateNodeIndex,
                        X,
                        Y}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateNode(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#DestroyNode" +
"", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void DestroyNode(string pUserName, string pUserPassword, int pidTObj, long pidObj, int DestroyNodeIndex) {
            this.Invoke("DestroyNode", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        DestroyNodeIndex});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDestroyNode(string pUserName, string pUserPassword, int pidTObj, long pidObj, int DestroyNodeIndex, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DestroyNode", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        DestroyNodeIndex}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDestroyNode(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#SetNode", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void SetNode(string pUserName, string pUserPassword, int pidTObj, long pidObj, int SetNodeIndex, System.Double newX, System.Double newY) {
            this.Invoke("SetNode", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        SetNodeIndex,
                        newX,
                        newY});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetNode(string pUserName, string pUserPassword, int pidTObj, long pidObj, int SetNodeIndex, System.Double newX, System.Double newY, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetNode", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        SetNodeIndex,
                        newX,
                        newY}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetNode(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#GetNodes", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("Nodes", DataType="base64Binary")]
        public System.Byte[] GetNodes(string pUserName, string pUserPassword, int pidTObj, long pidObj) {
            object[] results = this.Invoke("GetNodes", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNodes(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNodes", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Byte[] EndGetNodes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#SetNodes", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void SetNodes(string pUserName, string pUserPassword, int pidTObj, long pidObj, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] System.Byte[] Nodes, System.Double pWidth) {
            this.Invoke("SetNodes", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Nodes,
                        pWidth});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetNodes(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Byte[] Nodes, System.Double pWidth, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetNodes", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Nodes,
                        pWidth}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetNodes(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#CheckPlace", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void CheckPlace(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double pScale, System.Double Angle, System.Double dX, System.Double dY) {
            this.Invoke("CheckPlace", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        pScale,
                        Angle,
                        dX,
                        dY});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckPlace(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double pScale, System.Double Angle, System.Double dX, System.Double dY, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckPlace", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        pScale,
                        Angle,
                        dX,
                        dY}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCheckPlace(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#Move", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void Move(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double dX, System.Double dY, System.Double dZ) {
            this.Invoke("Move", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        dX,
                        dY,
                        dZ});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMove(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double dX, System.Double dY, System.Double dZ, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Move", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        dX,
                        dY,
                        dZ}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMove(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#SetPosition" +
"", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void SetPosition(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double X, System.Double Y, System.Double Z) {
            this.Invoke("SetPosition", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        X,
                        Y,
                        Z});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetPosition(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double X, System.Double Y, System.Double Z, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetPosition", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        X,
                        Y,
                        Z}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetPosition(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#Transform", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void Transform(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double pScale, System.Double Angle, System.Double dX, System.Double dY) {
            this.Invoke("Transform", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        pScale,
                        Angle,
                        dX,
                        dY});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTransform(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double pScale, System.Double Angle, System.Double dX, System.Double dY, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Transform", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        pScale,
                        Angle,
                        dX,
                        dY}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndTransform(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#ChangeScale" +
"", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void ChangeScale(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double pScale) {
            this.Invoke("ChangeScale", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        pScale});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeScale(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double pScale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeScale", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        pScale}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndChangeScale(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#Rotate", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void Rotate(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double Angle) {
            this.Invoke("Rotate", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        Angle});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRotate(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Xbind, System.Double Ybind, System.Double Angle, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Rotate", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Xbind,
                        Ybind,
                        Angle}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRotate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#ChangeLay", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void ChangeLay(string pUserName, string pUserPassword, int pidTObj, long pidObj, int NewLayID) {
            this.Invoke("ChangeLay", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        NewLayID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeLay(string pUserName, string pUserPassword, int pidTObj, long pidObj, int NewLayID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeLay", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        NewLayID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndChangeLay(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#ChangeOwner" +
"", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void ChangeOwner(string pUserName, string pUserPassword, int pidTObj, long pidObj, int ptrNewOwner) {
            this.Invoke("ChangeOwner", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        ptrNewOwner});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeOwner(string pUserName, string pUserPassword, int pidTObj, long pidObj, int ptrNewOwner, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeOwner", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        ptrNewOwner}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndChangeOwner(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#Square", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public System.Double Square(string pUserName, string pUserPassword, int pidTObj, long pidObj) {
            object[] results = this.Invoke("Square", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            return ((System.Double)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSquare(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Square", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Double EndSquare(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Double)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#Square1", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public System.Double Square1(string pUserName, string pUserPassword, int pidTObj, long pidObj, int ExceptPointPtr, System.Double ExceptPointValueX, System.Double ExceptPointValueY, System.Double NewWidth, System.Double pScale) {
            object[] results = this.Invoke("Square1", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        ExceptPointPtr,
                        ExceptPointValueX,
                        ExceptPointValueY,
                        NewWidth,
                        pScale});
            return ((System.Double)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSquare1(string pUserName, string pUserPassword, int pidTObj, long pidObj, int ExceptPointPtr, System.Double ExceptPointValueX, System.Double ExceptPointValueY, System.Double NewWidth, System.Double pScale, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Square1", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        ExceptPointPtr,
                        ExceptPointValueX,
                        ExceptPointValueY,
                        NewWidth,
                        pScale}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Double EndSquare1(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Double)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#GetInsideOb" +
"jectsList", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("List", DataType="base64Binary")]
        public System.Byte[] GetInsideObjectsList(string pUserName, string pUserPassword, int pidTObj, long pidObj) {
            object[] results = this.Invoke("GetInsideObjectsList", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInsideObjectsList(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInsideObjectsList", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Byte[] EndGetInsideObjectsList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#getIdLay", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int getIdLay(string pUserName, string pUserPassword, int pidTObj, long pidObj) {
            object[] results = this.Invoke("getIdLay", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetIdLay(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getIdLay", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndgetIdLay(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#getWidth", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public System.Double getWidth(string pUserName, string pUserPassword, int pidTObj, long pidObj) {
            object[] results = this.Invoke("getWidth", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            return ((System.Double)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetWidth(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getWidth", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Double EndgetWidth(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Double)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#setWidth", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void setWidth(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Value) {
            this.Invoke("setWidth", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Value});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsetWidth(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.Double Value, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("setWidth", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Value}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndsetWidth(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#getflUserSe" +
"curity", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool getflUserSecurity(string pUserName, string pUserPassword, int pidTObj, long pidObj) {
            object[] results = this.Invoke("getflUserSecurity", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetflUserSecurity(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getflUserSecurity", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndgetflUserSecurity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#setflUserSe" +
"curity", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void setflUserSecurity(string pUserName, string pUserPassword, int pidTObj, long pidObj, bool Value) {
            this.Invoke("setflUserSecurity", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Value});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsetflUserSecurity(string pUserName, string pUserPassword, int pidTObj, long pidObj, bool Value, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("setflUserSecurity", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Value}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndsetflUserSecurity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#getflDetail" +
"sNoIndex", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public bool getflDetailsNoIndex(string pUserName, string pUserPassword, int pidTObj, long pidObj) {
            object[] results = this.Invoke("getflDetailsNoIndex", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetflDetailsNoIndex(string pUserName, string pUserPassword, int pidTObj, long pidObj, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getflDetailsNoIndex", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndgetflDetailsNoIndex(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality#setflDetail" +
"sNoIndex", RequestNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality", ResponseNamespace="urn:FunctionalitySOAPInterface-ITBase2DVisualizationSOAPFunctionality")]
        public void setflDetailsNoIndex(string pUserName, string pUserPassword, int pidTObj, long pidObj, bool Value) {
            this.Invoke("setflDetailsNoIndex", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Value});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsetflDetailsNoIndex(string pUserName, string pUserPassword, int pidTObj, long pidObj, bool Value, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("setflDetailsNoIndex", new object[] {
                        pUserName,
                        pUserPassword,
                        pidTObj,
                        pidObj,
                        Value}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndsetflDetailsNoIndex(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
    }
}
