//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace SpaceViewer.SpaceProvider {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ISpaceProviderbinding", Namespace="http://tempuri.org/")]
    public class ISpaceProviderService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public ISpaceProviderService(string pServerURL) {
            this.Url = pServerURL + "/SpaceSOAPServer.dll/soap/ispaceprovider";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:FunctionalitySOAPInterface-ISpaceProvider#GetSpaceWindowBitmap", RequestNamespace="urn:FunctionalitySOAPInterface-ISpaceProvider", ResponseNamespace="urn:FunctionalitySOAPInterface-ISpaceProvider")]
        [return: System.Xml.Serialization.SoapElementAttribute("BitmapData", DataType="base64Binary")]
        public System.Byte[] GetSpaceWindowBitmap(string pUserName, string pUserPassword, System.Double X0, System.Double Y0, System.Double X1, System.Double Y1, System.Double X2, System.Double Y2, System.Double X3, System.Double Y3, [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] System.Byte[] HidedLaysArray, int VisibleFactor, System.Double DynamicHintVisibility, int Width, int Height) {
            object[] results = this.Invoke("GetSpaceWindowBitmap", new object[] {
                        pUserName,
                        pUserPassword,
                        X0,
                        Y0,
                        X1,
                        Y1,
                        X2,
                        Y2,
                        X3,
                        Y3,
                        HidedLaysArray,
                        VisibleFactor,
                        DynamicHintVisibility,
                        Width,
                        Height});
            return ((System.Byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSpaceWindowBitmap(
                    string pUserName, 
                    string pUserPassword, 
                    System.Double X0, 
                    System.Double Y0, 
                    System.Double X1, 
                    System.Double Y1, 
                    System.Double X2, 
                    System.Double Y2, 
                    System.Double X3, 
                    System.Double Y3, 
                    System.Byte[] HidedLaysArray, 
                    int VisibleFactor, 
                    System.Double DynamicHintVisibility, 
                    int Width, 
                    int Height, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("GetSpaceWindowBitmap", new object[] {
                        pUserName,
                        pUserPassword,
                        X0,
                        Y0,
                        X1,
                        Y1,
                        X2,
                        Y2,
                        X3,
                        Y3,
                        HidedLaysArray,
                        VisibleFactor,
                        DynamicHintVisibility,
                        Width,
                        Height}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Byte[] EndGetSpaceWindowBitmap(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Byte[])(results[0]));
        }
    }
}
